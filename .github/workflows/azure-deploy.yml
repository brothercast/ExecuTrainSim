# azure-deploy.yml - Optimized Workflow for Full App Deployment to Azure
name: 🚀 Deploy Full Node.js App to Azure Web App

on:
  push:
    branches:
      - main # or your production branch

  workflow_dispatch: # Enable manual triggering from GitHub Actions UI

env:
  AZURE_WEBAPP_NAME: 'ExecuTrainSim' # ⚙️ Replace with your Azure Web App name
  AZURE_RESOURCE_GROUP: 'ExecuTrainSimGroup' # ⚙️ Replace with your Azure Resource Group name
  NODE_VERSION: '20.x' # ⚙️ Set your desired Node.js version here

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production # Marks this as a production deployment

    steps:
      - name: ☁️ Checkout code # ⬇️ Get code from GitHub repository
        uses: actions/checkout@v3

      - name: 🛠️ Set up Node.js environment # ⚙️ Define Node.js environment for build and deploy
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }} # Use version defined in workflow environment variables

      - name: 🏗️ Install and Build Application # 📦 Install dependencies and build both client and server
        run: |
          echo "⚙️ Starting full application install and build process..."
          echo "  ➡️ Building executrainsim (React Client)..."
          cd executrainsim
          npm ci # ⚡️ Use npm ci for clean and faster installs in CI
          npm run build # 🔨 Build React application
          echo "  ✅ executrainsim build completed successfully."
          cd ..
          echo "  ➡️ Installing executrainserver (Node.js Server) dependencies..."
          cd executrainserver
          npm ci # ⚡️ Use npm ci for clean and faster server dependency install
          echo "  ✅ executrainserver dependencies installed successfully."
          echo "✅ Full application install and build process completed."
          cd .. # Return to workspace root

      - name: 📦 Prepare Deployment Package # 📂 Create deployment package with necessary files in correct structure
        run: |
          echo "📦 Preparing deployment package..."
          rm -rf deployment-package # 🧹 Clean up any previous package
          mkdir deployment-package # 📂 Create a fresh deployment package directory

          echo "  📂 Creating deployment-package/executrainserver directory"
          mkdir deployment-package/executrainserver # 📂 Create server subdirectory
          echo "  ➡️ Copying executrainserver files..."
          cp -r executrainserver/* deployment-package/executrainserver/ # 📂 Copy server files into subdirectory

          echo "  📂 Creating deployment-package/executrainsim-build directory"
          mkdir deployment-package/executrainsim-build # 📂 Create client build subdirectory
          echo "  ➡️ Copying executrainsim build output..."
          cp -r executrainsim/build/* deployment-package/executrainsim-build/ # 📂 Copy client build to subdirectory

          echo "  ➡️ Copying startup.sh to deployment package root..."
          cp startup.sh deployment-package/ # 📂 Copy startup script to package root

          echo "✅ Deployment package created successfully at deployment-package."
          echo "  🔍 Listing contents of deployment-package root:"
          ls -l deployment-package
          echo "  🔍 Listing contents of deployment-package/executrainserver:"
          ls -l deployment-package/executrainserver
          echo "  🔍 Listing contents of deployment-package/executrainsim-build:"
          ls -l deployment-package/executrainsim-build

      - name: 🔒 Login to Azure # 🔑 Authenticate with Azure using Service Principal
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # 🔑 Use AZURE_CREDENTIALS secret

      - name: 🚀 Deploy to Azure Web App # ☁️ Deploy deployment package to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }} # ⚙️ Use Web App name from environment variable
          slot-name: 'production' # 🎯 Deploy to production slot
          package: deployment-package # 📦 Deploy the 'deployment-package' directory

      - name: ⚙️ Set WEBSITE_NODE_DEFAULT_VERSION App Setting via Azure CLI # 🛠️ Ensure correct Node.js version on Azure
        run: |
          echo "⚙️ Setting WEBSITE_NODE_DEFAULT_VERSION App Setting via Azure CLI..."
          az webapp config appsettings set --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_WEBAPP_NAME }} --settings WEBSITE_NODE_DEFAULT_VERSION="${{ env.NODE_VERSION }}"
          echo "✅ WEBSITE_NODE_DEFAULT_VERSION App Setting set to ${{ env.NODE_VERSION }} via Azure CLI."